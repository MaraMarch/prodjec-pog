// src/app/page.tsx
'use client';
import { useState, useEffect, useRef, useCallback } from 'react';
import Link from 'next/link';
import styles from './Home.module.css'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (–µ—Å–ª–∏ Home.module.css –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ)
import { getCurrentWeather, getWeatherIconEmoji } from '../services/weatherService'; // –ò–º–ø–æ—Ä—Ç –∏–∑ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞

// –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–∏—Å–∫–∞ –∏ –≥–∞–ª–µ—Ä–µ–∏
const popularBelarusianCities = [
  "–ú–∏–Ω—Å–∫", "–ì–æ–º–µ–ª—å", "–ú–æ–≥–∏–ª—ë–≤", "–í–∏—Ç–µ–±—Å–∫", "–ì—Ä–æ–¥–Ω–æ", "–ë—Ä–µ—Å—Ç",
];
const allBelarusianCities = [ // –ë–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞
  "–ú–∏–Ω—Å–∫", "–ì–æ–º–µ–ª—å", "–ú–æ–≥–∏–ª—ë–≤", "–í–∏—Ç–µ–±—Å–∫", "–ì—Ä–æ–¥–Ω–æ", "–ë—Ä–µ—Å—Ç",
  "–ë–æ–±—Ä—É–π—Å–∫", "–ë–∞—Ä–∞–Ω–æ–≤–∏—á–∏", "–ë–æ—Ä–∏—Å–æ–≤", "–ü–∏–Ω—Å–∫", "–û—Ä—à–∞", "–ú–æ–∑—ã—Ä—å",
  "–°–æ–ª–∏–≥–æ—Ä—Å–∫", "–ù–æ–≤–æ–ø–æ–ª–æ—Ü–∫", "–õ–∏–¥–∞", "–ú–æ–ª–æ–¥–µ—á–Ω–æ", "–ü–æ–ª–æ—Ü–∫", "–ñ–ª–æ–±–∏–Ω",
  "–°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫", "–†–µ—á–∏—Ü–∞", "–°–ª—É—Ü–∫", "–ö–æ–±—Ä–∏–Ω", "–í–æ–ª–∫–æ–≤—ã—Å–∫", "–ö–∞–ª–∏–Ω–∫–æ–≤–∏—á–∏",
  "–°–º–æ—Ä–≥–æ–Ω—å", "–†–æ–≥–∞—á—ë–≤", "–û—Å–∏–ø–æ–≤–∏—á–∏", "–ì–æ—Ä–∫–∏", "–ù–æ–≤–æ–≥—Ä—É–¥–æ–∫", "–í–∏–ª–µ–π–∫–∞"
];


interface CurrentWeatherDisplayData {
  city: string;
  temp: number;
  humidity: number;
  wind: number;
  conditions: string;
  icon: string;
  country: string;
}

export default function Home() {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCityName, setSelectedCityName] = useState('–ú–∏–Ω—Å–∫');
  const [weatherData, setWeatherData] = useState<CurrentWeatherDisplayData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const searchRef = useRef<HTMLDivElement>(null);

  const fetchWeatherForCity = useCallback(async (cityToFetch: string) => {
    setLoading(true);
    setError(null);
    setWeatherData(null); // –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º

    const data = await getCurrentWeather(cityToFetch);

    if (data && data.cod === 200) {
      setWeatherData({
        city: data.name,
        temp: Math.round(data.main.temp),
        humidity: data.main.humidity,
        wind: data.wind.speed,
        conditions: data.weather[0]?.description ? data.weather[0].description.charAt(0).toUpperCase() + data.weather[0].description.slice(1) : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        icon: getWeatherIconEmoji(data.weather[0]?.icon || ''),
        country: data.sys.country,
      });
    } else {
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è "${cityToFetch}". –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ API –∫–ª—é—á.`);
      // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å
      // setWeatherData(null);
    }
    setLoading(false);
  }, []); // useCallback –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

  useEffect(() => {
    fetchWeatherForCity(selectedCityName);
  }, [selectedCityName, fetchWeatherForCity]); // –î–æ–±–∞–≤–ª—è–µ–º fetchWeatherForCity –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
    setShowSuggestions(true);
  };

  const handleSuggestionClick = (cityName: string) => {
    setSelectedCityName(cityName);
    setSearchTerm(''); // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    setShowSuggestions(false);
  };

  const handleCityThumbClick = (cityName: string) => {
    setSelectedCityName(cityName);
  }

  // –ö–ª–∏–∫ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {
        setShowSuggestions(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const filteredSuggestCities = searchTerm.trim()
    ? allBelarusianCities.filter(city =>
        city.toLowerCase().includes(searchTerm.trim().toLowerCase())
      ).slice(0, 7) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 7 –ø–æ–¥—Å–∫–∞–∑–æ–∫
    : [];

  return (
    <div className={styles.container}>
      <nav className={styles.nav}>
        <Link href="/" className={styles.navLink}>–ì–ª–∞–≤–Ω–∞—è</Link>
        <Link href="/forecast" className={styles.navLink}>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π</Link>
        <Link href="/forecast-3day" className={styles.navLink}>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è</Link>
        <Link href="/forecast-weekend" className={styles.navLink}>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ</Link>
        <Link href="/forecast-week" className={styles.navLink}>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é</Link>
        <Link href="/forecast-10day" className={styles.navLink}>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 10 –¥–Ω–µ–π</Link>
        <Link href="/history" className={styles.navLink}>–ò—Å—Ç–æ—Ä–∏—è</Link>
      </nav>

      <main className={styles.main}>
        <div className={styles.weatherCard}>
          <h1 className={styles.title}>
            <span className={styles.titleIcon}>üå§Ô∏è</span>
            –ü–æ–≥–æ–¥–∞ –≤ –ë–µ–ª–∞—Ä—É—Å–∏
          </h1>

          <div className={styles.searchContainer} ref={searchRef}>
            <div className={styles.searchBox}>
              <input
                type="text"
                value={searchTerm}
                onChange={handleSearchChange}
                placeholder="–ù–∞–π—Ç–∏ –≥–æ—Ä–æ–¥..."
                className={styles.searchInput}
                onFocus={() => setShowSuggestions(true)}
              />
              {showSuggestions && filteredSuggestCities.length > 0 && (
                <div className={styles.suggestionsList}>
                  {filteredSuggestCities.map((city) => (
                    <button
                      key={city}
                      className={styles.suggestionItem}
                      onClick={() => handleSuggestionClick(city)}
                    >
                      {city}
                    </button>
                  ))}
                </div>
              )}
            </div>
          </div>

          {loading && <p style={{ textAlign: 'center', padding: '20px' }}>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è {selectedCityName}...</p>}
          {error && <p style={{ textAlign: 'center', color: 'red', padding: '20px' }}>{error}</p>}

          {weatherData && !loading && !error && (
            <div className={styles.weatherInfo}>
              <div className={styles.weatherHeader}>
                <div>
                  <h2 className={styles.city}>
                    {weatherData.city}
                    {weatherData.country && <span className={styles.cityBadge}>{weatherData.country}</span>}
                  </h2>
                  <p className={styles.conditions}>
                    {weatherData.conditions}
                  </p>
                </div>
                <div className={styles.weatherIcon}>
                  {weatherData.icon}
                </div>
              </div>

              <div className={styles.weatherGrid}>
                <div className={styles.weatherItem}>
                  <span className={styles.weatherValue}>{weatherData.temp}¬∞C</span>
                  <span className={styles.weatherLabel}>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</span>
                </div>
                <div className={styles.weatherItem}>
                  <span className={styles.weatherValue}>{weatherData.humidity}%</span>
                  <span className={styles.weatherLabel}>–í–ª–∞–∂–Ω–æ—Å—Ç—å</span>
                </div>
                <div className={styles.weatherItem}>
                  <span className={styles.weatherValue}>{weatherData.wind.toFixed(1)} –º/—Å</span>
                  <span className={styles.weatherLabel}>–í–µ—Ç–µ—Ä</span>
                </div>
              </div>
            </div>
          )}

          <div className={styles.cityGallery}>
            {popularBelarusianCities.map((city) => (
              <button
                key={city}
                className={`${styles.cityThumb} ${selectedCityName === city ? styles.active : ''}`}
                onClick={() => handleCityThumbClick(city)}
                disabled={loading && selectedCityName === city} // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
              >
                {city}
              </button>
            ))}
          </div>
        </div>
      </main>
    </div>
  );
}
