// src/services/weatherService.ts

const API_KEY = process.env.NEXT_PUBLIC_OPENWEATHERMAP_API_KEY;
const BASE_URL = 'https://api.openweathermap.org/data/2.5'; // –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ API)
export interface WeatherData {
  name: string;
  main: {
    temp: number;
    humidity: number;
    feels_like: number;
  };
  wind: {
    speed: number;
  };
  weather: {
    description: string;
    icon: string; // –ö–æ–¥ –∏–∫–æ–Ω–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, "01d"
    main: string;
  }[];
  sys: {
    country: string;
  };
  cod: number | string; // –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞, 200 –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
  message?: string; // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç API
}

export interface ForecastListItem {
  dt: number; // timestamp
  main: {
    temp: number;
    temp_min: number;
    temp_max: number;
    humidity: number;
    feels_like: number;
  };
  weather: {
    id: number;
    main: string;
    description: string;
    icon: string;
  }[];
  wind: {
    speed: number;
  };
  dt_txt: string; // "2024-03-25 12:00:00"
  pop: number; // Probability of precipitation
}

export interface ForecastData {
  cod: string;
  message: number | string;
  cnt: number; // Number of 3-hour forecast periods
  list: ForecastListItem[];
  city: {
    id: number;
    name: string;
    country: string;
    population: number;
    timezone: number;
    sunrise: number;
    sunset: number;
  };
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ Emoji –ø–æ –∫–æ–¥—É OpenWeatherMap
export const getWeatherIconEmoji = (iconCode: string): string => {
  const mapping: { [key: string]: string } = {
    '01d': '‚òÄÔ∏è', '01n': 'üåô',
    '02d': '‚õÖ', '02n': '‚òÅÔ∏è',
    '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',
    '04d': '‚òÅÔ∏è', '04n': '‚òÅÔ∏è', // often 'broken clouds' or 'overcast clouds'
    '09d': 'üåßÔ∏è', '09n': 'üåßÔ∏è',
    '10d': 'üå¶Ô∏è', '10n': 'üå¶Ô∏è',
    '11d': '‚õàÔ∏è', '11n': '‚õàÔ∏è',
    '13d': '‚ùÑÔ∏è', '13n': '‚ùÑÔ∏è',
    '50d': 'üå´Ô∏è', '50n': 'üå´Ô∏è',
  };
  return mapping[iconCode] || 'üåç'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–æ–±—É—Å, –µ—Å–ª–∏ –∏–∫–æ–Ω–∫–∏ –Ω–µ—Ç
};


export const getCurrentWeather = async (city: string): Promise<WeatherData | null> => {
  if (!API_KEY) {
    console.error("API_KEY OpenWeatherMap –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
    return null;
  }
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º ,BY –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏
    const response = await fetch(
      `${BASE_URL}/weather?q=${encodeURIComponent(city)},BY&appid=${API_KEY}&units=metric&lang=ru`
    );
    const data: WeatherData = await response.json();

    if (!response.ok || data.cod !== 200) {
      console.error(
        `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –¥–ª—è ${city}:`,
        data.message || response.statusText
      );
      return null;
    }
    return data;
  } catch (error) {
    console.error(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –¥–ª—è ${city}:`, error);
    return null;
  }
};

export const get5DayForecast = async (city: string): Promise<ForecastData | null> => {
  if (!API_KEY) {
    console.error("API_KEY OpenWeatherMap –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
    return null;
  }
  try {
    const response = await fetch(
      `${BASE_URL}/forecast?q=${encodeURIComponent(city)},BY&appid=${API_KEY}&units=metric&lang=ru`
    );
    const data: ForecastData = await response.json();

    if (!response.ok || data.cod !== "200") { // API –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç cod –∫–∞–∫ —Å—Ç—Ä–æ–∫—É "200"
      console.error(
        `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è ${city}:`,
        data.message || response.statusText
      );
      return null;
    }
    return data;
  } catch (error) {
    console.error(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è ${city}:`, error);
    return null;
  }
};
